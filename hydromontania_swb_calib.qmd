---
title: "SWB model parameters calibration analysis"
author: "SwissDataApps"
date: "2024-10-28"
output-file: index.html
format:
  html:
    theme: cosmo
    toc: true
    code-fold: true
    toc-title: "Contents"
    toc-location: left
    code-summary: "Show Code"
    favicon: images/ssa_icon_free.png
    logo: images/logo_black_complete.png
execute:
  echo: true       # Show code output
  warning: false   # Suppress warnings
editor: 
  markdown: 
    wrap: sentence
---

## Introduction

The Hydromontania project is aimed at providing precise irrigation recommendations to farmers based on soil water balance model (SWB) outputs.
Effective water management is essential for agricultural productivity, especially in regions with varied soil and weather conditions like Switzerland.
The SWB model, a core component of Hydromontania, utilizes daily precipitation and evapotranspiration data alongside a set of soil and terrain parameters to estimate available soil moisture and water dynamics.

For the model to provide accurate irrigation guidance, these soil and terrain parameters must be calibrated to reflect actual field conditions.
This calibration process can be conducted globally or specifically for each location, optimizing the model's accuracy by aligning its output with real-world data.
To achieve this, ground truth data—primarily soil moisture measurements—will be gathered and used to fine-tune the SWB model parameters, ensuring that model outputs closely resemble observed soil conditions.

## Ground Truth Data

To calibrate and validate the SWB model, we compiled and standardized soil moisture and rainfall data from 100 locations across Switzerland.
This dataset was derived from three different sources, each contributing unique aspects to the ground truth data:

-   **Soil Moisture and Depth-Specific Readings**: The soil moisture data includes tension readings at depths of approximately 20 cm, 40 cm, and 60 cm, along with volumetric soil moisture data available exclusively for the top 20 cm layer.

<!-- -->

-   **Rainfall Data**: Daily rainfall records were incorporated from each of the datasets, as precipitation is a critical component of the water balance in the model.

Given the heterogeneity in the data sources, extensive preprocessing was necessary:

-   **Resampling to Daily Time Resolution**: Originally, some variables were recorded at an hourly resolution.
    To maintain consistency across variables and reduce data size, all data was resampled to a daily resolution.

-   **Data Gaps**: Since data gaps were present—some extensive and others brief (around three days)—we implemented linear interpolation for short gaps, which allowed for more continuous time series, thereby supporting robust model calibration.

The data spans from 2018 or 2019 (depending on the source) to the present, covering seasonal and interannual variability.
This range ensures that the calibration can account for different climate and soil moisture conditions.
In addition to the main variables, metadata and precise geographic locations for each of the 100 sites were documented.

To complement this ground truth data, we also collected weather data (e.g., temperature, humidity, wind speed) necessary for evapotranspiration modeling.
Using this data, we ran an evapotranspiration model to generate daily evapotranspiration estimates, which serve as key inputs to the SWB model.


## Soil Water Balance Model Runs

We configured the SWB model to run simulations for each location, using a grid of 36 distinct soil parameter combinations. These parameter sets represent different values of runoff curve numbers, drainage coefficients, moisture utilization factors, field capacities, and wilting points. This grid search approach allowed us to capture a range of soil moisture behaviors and enabled initial testing of which parameter sets best matched the field data.


```{r}
# load libraries

library(here)
library(stringr)
library(ggplot2)
library(zoo)
library(purrr)
library(dplyr)
library(tidyr)
library(readr)
library(magrittr)
library(lubridate)
library(sf)
library(GA)
library(parallel)
library(yardstick)
library(tmap)

# Source Modules & Helpers
source(here("scripts","helper_swb.R"), local = FALSE)
source(here("scripts","db_interface.R"), local = FALSE)
```

```{r}

# Get swb model output for 100 locations and a 36 rows grid search of soil parameters

swb_modeled <- read_rds(here("data", "swb_calibration", "swb_calibr_params_grid.rds"))

con <- make_db_conn()

# Get tension soil moisture reading for 100 locations

# sm_tens <- dplyr::tbl(con, dbplyr::in_schema("hydromontania", "calibration_data_X")) %>% 
#   # dplyr::filter(loc_id %in% loc_to_run) %>% 
#   dplyr::filter(var == "sm_tens") %>% 
#   dplyr::collect()  
# 
# # review_reps <- sm_tens %>% 
# #   filter(depth == 20) %>% 
# #   count(loc_id, date) %>% 
# #   group_by(loc_id) %>% 
# #   summarise(max_n = max(n),
# #             mean_n = mean(n)) 
# 
# sm_tens_sum <- sm_tens %>% 
#   filter(between(value, 0.01, 79.99)) %>% 
#   group_by(loc_id, date) %>% 
#   summarise(sm_tens_mean = mean(value),
#             depths = list(sort(unique(depth)))) %>% 
#   ungroup()
# 
# loc_depths <- sm_tens_sum %>% 
#   group_by(loc_id) %>% 
#   summarise(depth = paste0("0-", str_flatten(unique(unlist(depths)), "-"))) %>% 
#   ungroup()
# 
# sm_tens_sum <- sm_tens_sum %>% 
#   select(-depths) %>% 
#   left_join(loc_depths, by = "loc_id") %>% 
#   left_join(sm_tens %>% 
#               filter(depth == 20) %>% 
#               select(loc_id, date, sm_tens_20 = value),
#               by = c("loc_id", "date")) %>% 
#   mutate(date = as_date(date))




```

```{r}
# Get locations and join soil properties

# con <- make_db_conn()

locations_tbl <- dplyr::tbl(con, dbplyr::in_schema("hydromontania", "calibration_locs_F")) %>%
  collect()
locations <- locations_tbl %>%
  st_as_sf(coords = c("loc_lon", "loc_lat"), crs = 4326) #%>%

sss_map <- st_read(here("data", "soil", "CH_Bodeneignungskarte_20160330.shp"), quiet = TRUE) %>% 
  mutate(
    depth = case_when(
      GRUNDIGKEI == 0 ~ 175,
      GRUNDIGKEI == 1 ~ 125,
      GRUNDIGKEI == 2 ~ 85,
      GRUNDIGKEI == 3 ~ 60,
      GRUNDIGKEI == 4 ~ 40,
      GRUNDIGKEI == 5 ~ 20,
      GRUNDIGKEI == 6 ~ 10,
      TRUE ~ NA
      )
  ) %>% 
  st_transform(st_crs(locations))

locations_int <- locations %>% 
  st_join(sss_map)


na_rows <- locations_int %>%
  filter(is.na(depth)) %>% 
  select(loc_id:topography)

valid_polygons <- sss_map %>%
  filter(!is.na(depth))

nearest_indices <- st_nearest_feature(na_rows, valid_polygons)

nearest_polygons <- valid_polygons[nearest_indices, ]

na_rows_fixed <- na_rows %>%
  bind_cols(nearest_polygons %>% st_set_geometry(NULL))

locations_int_fixed <- locations_int %>%
  filter(!is.na(depth)) %>%
  bind_rows(na_rows_fixed)

```


```{r}


# Get volumetric soil moisture 

sm_vol <- dplyr::tbl(con, dbplyr::in_schema("hydromontania", "calibration_data_X")) %>% 
  dplyr::filter(var == "sm_vol") %>% 
  dplyr::collect()  

sm_vol_filt <- sm_vol %>% 
  filter(between(value, 10, 60)) %>%
  select(loc_id, date, sm_vol = value) %>% 
  mutate(date = as_date(date))

# sm_vol_filt %>%
#   ggplot(aes(sm_vol)) +
#   geom_density() + 
#   theme_light()

sm_vol_join <- sm_vol_filt %>% 
  left_join(locations_int_fixed %>% 
              st_drop_geometry() %>% 
              select(loc_id, depth),
            by = "loc_id")

sm_mm_adj <- sm_vol_join %>% 
  mutate(sm_mm = (sm_vol / 100) * depth * 10)


# 
# DBI::dbDisconnect(con)



```


## Problem Statement

The primary output of the SWB model is available water—the total water content (in mm) available in the root zone. This metric is conceptually similar to volumetric soil moisture content; however, a majority of the 100 locations use soil moisture tension sensors, which measure soil water potential rather than volumetric water content. This difference presents a key challenge in calibration.

For a subset of locations, we have both tension-based soil moisture measurements and volumetric soil moisture readings (specifically for the 20 cm depth layer). Given that volumetric measurements are more directly related to available water in the SWB model, we began by focusing our analysis on these stations. By comparing the SWB model outputs with the ground truth volumetric data at these sites, we aim to establish a baseline relationship between the SWB model’s available water output and the observed soil moisture. This comparison will help to understand if the involved variables are highly correlated or not, and wether we can rely on all this data.

To assess the relationship between volumetric and tension-based soil moisture readings, we generated a series of comparative plots:

```{r}
# Join tension and volumetric soil moisture and compare them

# sm_comparison <- sm_vol_filt %>% 
#   select(loc_id, date, sm_vol) %>% 
#   left_join(sm_tens_sum %>% select(loc_id, date, sm_tens_20, sm_tens_mean), by = c("loc_id", "date")) %>% 
#   filter(
#     between(sm_tens_mean, 0.01, 100),
#     between(sm_tens_20, 0.01, 100)
#   )
# 
# sm_comparison %>% write_rds(here("data", "swb_calibration", "sm_tens_data_comparison.rds"))
sm_comparison <- read_rds(here("data", "swb_calibration", "sm_tens_data_comparison.rds"))

# sm_comparison$loc_id %>% unique()

sm_comparison %>% 
  ggplot(aes(sm_vol, sm_tens_20)) + 
  geom_point(alpha = 0.5) +
  geom_smooth(se = FALSE) + 
  facet_wrap(~ loc_id, scales = "free")  +
  labs(title = "Volumetric vs Tension Soil Moisture (0-20 cm) by Station",
       x = "Volumetric Soil Moisture",
       y = "Tension Soil Moisture (0-20)") +
  theme_minimal()

sm_comparison %>% 
  ggplot(aes(sm_vol, sm_tens_mean)) + 
  geom_point(alpha = 0.5) +
  geom_smooth(se = FALSE) + 
  facet_wrap(~ loc_id, scales = "free")  +
  labs(title = "Volumetric vs Mean Tension Soil Moisture (0-60 cm) by Station",
       x = "Volumetric Soil Moisture",
       y = "Mean Tension Soil Moisture (0-60)") +
  theme_minimal()

sm_comparison %>% 
  mutate(loc_id = factor(loc_id)) %>% 
  ggplot(aes(sm_vol, sm_tens_20, color = loc_id)) + 
  geom_point(alpha = 0.5) +
  geom_smooth(se = FALSE) + 
  labs(title = "Volumetric vs Tension Soil Moisture (0-20 cm)",
       x = "Volumetric Soil Moisture",
       y = "Tension Soil Moisture (0-20)") +
  theme_minimal()

```

Scatterplots of daily values by station show that some of them exhibit a clear, consistent relationship between volumetric and tension measurements. These stations reveal a stable relation between soil moisture tension and actual water content in the soil.

In contrast, some stations show a high level of noise, with no discernible pattern between the two variables. This variability suggests that external factors or sensor inconsistencies, might influence the measurements, making direct comparisons challenging.

When aggregating data across all stations, we observe variations in offset. For some locations, the soil moisture tension curve appears shifted—either to the right or left—relative to volumetric measurements. This offset suggests that different locations may require specific adjustments or calibrations, emphasizing the need for location-specific analysis.


## Use of volumetric ground truth data

In this section we will be calibrating SWB model soil parameters using volumetric soil moisture data as ground truth.

We must consider that from the 100 locations available at the moment in the ground truth dataset only 11 of those locations register this variable.

One important consideration to be made is the fact that volumetric soil moisture and available water content are different conceptually and we need to account for that.

The former refers to the percentage of water in a certain volume of soil, a proportion.
The latter corresponds to mm of water available, an absolute volume amount.
To convert from one to the other we must consider the soil depth and adjust units with a factor.

SM(mm) = SM(vol) × SoilDepth(cm) × 10

Soil depth is going to be extracted from Nabodat Swiss Soil Suitability Map.

Volumetric soil moisture is measured in the first 20 cm, while the AVAIL variable returned by the SWB model corresponds to the available water in the all of the root zone of the soil.
We are going to extrapolate those readings in the first layer of the soil to the whole extent of it.


```{r}
# Prepare weather data to run SWB model

vars <- c(11, 19)

locs_vol <- sm_mm_adj$loc_id %>% unique()

# soil_params_grid <- expand.grid(
#   CN = c(30, 70),
#   DC = c(0.3, 0.5, 0.7),
#   MUF = c(0.05, 0.2),
#   WATfc = c(26, 100, 200)
# ) %>% 
#   mutate(WATwp = case_when(
#     WATfc == 26 ~ 2,
#     WATfc == 100 ~ 60,
#     WATfc == 200 ~ 120),
#     soil_params_id = row_number()
#   )
# 

X1 <- dplyr::tbl(con, dbplyr::in_schema("hydromontania", "calibration_weather_X")) %>% 
  dplyr::filter(loc_id %in% locs_vol) %>% 
  dplyr::filter(var_id %in% vars) %>% 
  dplyr::collect()

variable <- GET_variables()

a <- X1 %>% 
  dplyr::group_by(loc_id) %>%
  dplyr::mutate(l_days = as.integer(difftime(max(date), min(date), units = "days")) + 1) %>% 
  ungroup() %>% 
  dplyr::group_by(loc_id, var_id, l_days) %>%
  dplyr::summarise(n = n(),
                   .groups = "drop") %>% 
  dplyr::mutate(is_complete = as.integer(n == l_days)) %>%
  dplyr::group_by(loc_id) %>%
  dplyr::summarise(is_complete = sum(is_complete) == length(vars)) %>%
  dplyr::filter(is_complete)# %>%

X <- X1 %>% 
  dplyr::group_by(loc_id) %>%
  dplyr::left_join(variable, by = dplyr::join_by(var_id)) %>%
  dplyr::select(loc_id, var_short, date, value) %>%
  tidyr::pivot_wider(names_from = "var_short", values_from = "value") %>%
  dplyr::arrange(date, .by_group = TRUE) %>%
  dplyr::ungroup() #%>% 
  # dplyr::cross_join(soil_params_grid)
# ADD_field_info(c("field_lon", "field_lat", "field_elevation"))
#   
#   # Calculates the SWB by field and join to X1 to get the dimension_id
# swb_modeled <- X %>%
#   dplyr::group_by(loc_id, soil_params_id) %>%
#   dplyr::group_modify(.f = RUN_swb_calc) %>%
#   dplyr::ungroup() 
# 
# swb_modeled %>% write_rds(here("data", "swb_calibration", "swb_calibr_params_grid_vol.rds"))
# swb_modeled <- read_rds(here("data", "swb_calibration", "swb_calibr_params_grid_vol.rds"))
# soil_params_grid %>% write_rds(here("data", "swb_calibration", "soil_params_grid.rds"))

```

### Parameters optimization using Genetic Algorithm

To calibrate the SWB model soil parameters per location we will use a global optimization algorithm, more precisely Genetic Algorithm (GA).

GA will be performed by location on an iterative process, as it is expected that optimal soil parameters vary among location depending on soil properties.

After an initial attempt using the daily time series unprocessed it was clear that noise in the daily resolution would affect the error and consequently the parameter optimizing.
For that reason both measured and modeled daily time series were smoothed using a 5 days moving average.

```{r}

num_cores <- detectCores()  # Detects the number of available cores
num_cores_to_use <- num_cores - 4

objective_function <- function(params, loc_id_data, sm_obs) {
  # params = c(CN, DC, MUF, WATfc, WATwp)
  
  # Run the SWB model with current parameters for this loc_id (pseudo-code)
  loc_id_data <- loc_id_data %>%
    mutate(CN = params[1], 
           DC = params[2], 
           MUF = params[3], 
           WATfc = params[4], 
           WATwp = WATfc * params[5])
  
  # Call the SWB model function to get the modeled soil water (replace with actual function)
  swb_output <- RUN_swb_calc(loc_id_data)
  
  # Discard first 20 days until model stabilizes
  swb_output <- swb_output[21:nrow(swb_output),]
  
  # Calculate RMSE between observed and modeled available water (swb_output$AVAIL)
  output_join <- sm_obs %>% 
    left_join(swb_output, by = "date") %>% 
    mutate(AVAIL = rollmean(AVAIL, k = 5, fill = NA, align = "center")) %>% 
    drop_na(AVAIL)
    
  rmse <- sqrt(mean((output_join$AVAIL - output_join$sm_mm_smooth)^2, na.rm = TRUE))
  
  return(rmse)
}

# Set up the GA for each loc_id
run_optimization_by_loc <- function(loc_id, X, sm_mm_adj) {
  start <- Sys.time()
  # Subset data for the given loc_id
  loc_id_data <- X %>% filter(loc_id == !!loc_id)
  sm_obs <- sm_mm_adj %>% 
    filter(loc_id == !!loc_id) %>% 
    mutate(sm_mm_smooth = rollmean(sm_mm, k = 5, fill = NA, align = "center")) # smooth daily reading to reduce noise  
  
  # Run the GA optimization
  GA_result <- ga(type = "real-valued",
                  fitness = function(params) -objective_function(params, loc_id_data, sm_obs), # GA maximizes fitness
                  lower = c(30, 0.2, 0.05, 50, 0.3),  # Lower bounds for [CN, DC, MUF, WATfc, WATwp_ratio]
                  upper = c(90, 0.8, 1, 250, 0.7),    # Upper bounds
                  popSize = 100,  # Population size
                  maxiter = 200,  # Number of generations
                  run = 40,
                  parallel = num_cores_to_use, 
                  optim = FALSE)       # Early stopping if no improvement
  
  print(Sys.time() - start)
  
  # Return the optimal parameters
  best_params <- GA_result@solution
  return(best_params)
}

# Get list of unique loc_ids
loc_ids <- unique(sm_mm_adj$loc_id)

# Store results for each location
results <- list()

# Run the optimization for each loc_id
# for (loc_id in loc_ids) {
#   cat("Running optimization for loc_id:", loc_id, "\n")
#   
#   best_params <- run_optimization_by_loc(loc_id, X, sm_mm_adj)
#   
#   # Store the results in a list
#   results[[as.character(loc_id)]] <- best_params
# }
# 
# # Convert the results into a dataframe and ensure only the first row is selected per loc_id
# optimized_params_df <- do.call(rbind, lapply(names(results), function(loc_id) {
#   # Extract the first row if there are multiple solutions
#   best_solution <- results[[loc_id]][1, ] 
#   
#   data.frame(loc_id = loc_id,
#              CN = best_solution[1],
#              DC = best_solution[2],
#              MUF = best_solution[3],
#              WATfc = best_solution[4],
#              WATwp = best_solution[4] * best_solution[5],
#              WATwp_ratio = best_solution[5])
# }))
# 
# # Convert loc_id to a numeric type if necessary
# optimized_params_df$loc_id <- as.numeric(optimized_params_df$loc_id)
# 
# optimized_params_df %>% write_rds(here("data", "swb_calibration", "vol_df_ga_swb_calibration_v2.rds"))

```

### Optimization results analysis

We have now obtained the optimal set of parameters for each location.

Now, we will run the SWB model using these and compare the SWB output with the soil moisture measurements.

Although the number of locations is fairly low, 11, we will explore the distribution of the optimal parameters, and we will compare them with soil and topography metadata by location, looking for relations and insights in this sense.

```{r}

optimized_params_df <- read_rds(here("data", "swb_calibration", "vol_df_ga_swb_calibration_v2.rds"))

# Join the optimal parameters to the data for each loc_id
X_params <- X %>%
  left_join(optimized_params_df, by = "loc_id")

swb_modeled_df <- X_params %>%
  group_by(loc_id) %>% 
  dplyr::group_modify(.f = RUN_swb_calc) %>%
  dplyr::ungroup()


# Join modeled results (AVAIL) with ground truth data (sm_mm_adj)
combined_data <- swb_modeled_df %>%
  left_join(sm_mm_adj, by = c("loc_id", "date")) %>% 
  mutate(
      AVAIL = rollmean(AVAIL, k = 5, fill = NA, align = "center"),
      sm_mm = rollmean(sm_mm, k = 5, fill = NA, align = "center")
    )

# Plot the comparison of modeled AVAIL and ground truth soil moisture (sm_mm)
combined_data %>% 
  ggplot(aes(x = date)) +
  geom_line(aes(y = AVAIL, color = "Modeled water available in mm")) +
  geom_line(aes(y = sm_mm, color = "Ground Truth SM converted to mm")) +
  facet_grid(loc_id~ 1, scales = "free_y") + # Facet by location
  labs(title = "Modeled Available Water vs Ground Truth Soil Moisture",
       y = "Water (mm)",
       color = "Legend") +
  theme_minimal()

# combined_data %>% 
#   ggplot(aes(x = sm_mm, AVAIL)) +
#   geom_point(alpha = 0.2) +
#   geom_smooth(se = FALSE) +
#   labs(title = "Modeled Available Water vs Ground Truth Soil Moisture",
#        x = "Ground Truth",
#        y = "Modeled") +
#   theme_minimal()

combined_data %>% 
  filter(loc_id %in% c(6, 33, 34, 41)) %>% 
  ggplot(aes(x = date)) +
  geom_line(aes(y = AVAIL, color = "Modeled water available in mm")) +
  geom_line(aes(y = sm_mm, color = "Ground Truth SM converted to mm")) +
  facet_grid(loc_id~ 1, scales = "free_y") + # Facet by location
  labs(title = "Modeled Available Water vs Ground Truth Soil Moisture",
       y = "Water (mm)",
       color = "Legend") +
  theme_minimal()

combined_data %>% 
  filter(!loc_id %in% c(6, 33, 34, 41)) %>% 
  ggplot(aes(x = date)) +
  geom_line(aes(y = AVAIL, color = "Modeled water available in mm")) +
  geom_line(aes(y = sm_mm, color = "Ground Truth SM converted to mm")) +
  facet_grid(loc_id~ 1, scales = "free_y") + # Facet by location
  labs(title = "Modeled Available Water vs Ground Truth Soil Moisture",
       y = "Water (mm)",
       color = "Legend") +
  theme_minimal()


```

The compared time series by location shows that in a small set of locations (e.g. 34, 33, 6, 41) the model output has a decent fit with the converted ground truth data.
For the rest (majority) of locations, the model fails completely to fit the data.

```{r}
metrics_by_loc <- combined_data %>%
  group_by(loc_id) %>%
  summarise(
    rsq = rsq_vec(sm_mm, AVAIL) ,       # R-squared
    mae = mae_vec(sm_mm, AVAIL),        # Mean Absolute Error
    rmse = rmse_vec(sm_mm, AVAIL),      # Root Mean Squared Error
    mape = mape_vec(sm_mm, AVAIL)       # Mean Absolute Percentage Error
  ) %>% 
  arrange(desc(rsq))

# View metrics by location
print(metrics_by_loc)
# 
# # Calculate overall metrics (all locations)
# overall_metrics <- combined_data %>%
#   summarise(
#     mae = mae_vec(sm_mm, AVAIL),
#     rmse = rmse_vec(sm_mm, AVAIL),
#     mape = mape_vec(sm_mm, AVAIL),
#     rsq = rsq_vec(sm_mm, AVAIL)
#   )
# 
# # View overall metrics
# print(overall_metrics)
```

Calculating R-Squared per location confirms what we've seen in the last chart, only 4 out of 11 locations have an r squared over 0.3, which is still a low value.

This raises one question and one challenge.

A question, why can we have some minor fit only in one third of the locations with volumetric soil moisture data?

We can think of 5 factors that could be affecting the fitness of the model: 
  a. modeled rainfall input data, 
  b. modeled evapotranspiration input data, 
  c. the SWB model itself, 
  d. the genetic algorithm used to fit the SWB soil parameters, 
  e. quality of ground truth data.

To answer the question I believe we can discard a, since the precision of these modeled variables should be somewhat similar for the different locations.
We could expect a much lower precision in the modeled rainfall in mountain regions, but these 11 locations belong all to the same region, and in the following map we can even see that in the valley there are locations with higher and lower R-Squared.

For b, however, we could be having untrusty ETP values for some location if the vegetation cover is not a meadow, which is what we are using as a default in the ETP model. 

The model algorithm applied is the same for all locations, but it could be that it behaves better for certain soil types, vegetation covers or topology.

For what can be seen in the time series comparison chart, some of the main parameters (field capacity and wilting point) appear to be wrong in some locations.
This could be improved, but those locations even with a properly set parameters would probably still have no fit, as the two time series are no similar at all.

Regarding the last factor, quality of ground truth data, if we look at the time series chart of those locations with no fits, some of them exhibit unexpected patterns in the readings.

The challenge previously mentioned is now to improve the fitness fo those location that have now some minor fit.
For this purpose we are going to try different approaches, some of which have already been implemented like increasing the thoroughness of the genetic algorithm search and applying moving averages to the daily time series to reduce the noise effect.

```{r}
locations_rsq <- locations %>% 
  right_join(metrics_by_loc %>% dplyr::select(loc_id, rsq))

tmap_mode("view")
tm_shape(locations_rsq) + 
  tm_symbols(col = "rsq", palette="viridis") + 
  tm_basemap("Esri.WorldImagery")

```


## Location based analysis

In the following section we are going to explore if there is any relation between the fitness of the model and the proper optimized soil parameters chosen with some of the locations' metadata.

The idea behind this is gather some insights and later on be able to model the SWB soil parameters using location metadata as input, such as soil texture, soil depth, terrain slope, etc.

Unfortunately, we have a very low amount of locations to perform a robust analysis.


```{r}
locs_params <- optimized_params_df %>% 
  left_join(locations_int_fixed, by = "loc_id") %>% 
  left_join(locations_rsq %>% select(loc_id, rsq), by = "loc_id")

locs_params %>%
  mutate(use = reorder(factor(ifelse(str_detect(use, "Wiese"), "Wiese", use)), desc(rsq))) %>% 
  ggplot(aes(use, rsq)) + 
  geom_boxplot() + 
  labs(title = "Model fit by use of land",
       y = "R-Squared",
       x = "Use") +
  theme_minimal()

locs_params %>%
  mutate(soil_type = reorder(factor(soil_type), desc(rsq))) %>% 
  ggplot(aes(soil_type, rsq)) + 
  geom_boxplot() + 
  labs(title = "Model fit by soil type",
       y = "R-Squared",
       x = "Soil type") +
  theme_minimal()

locs_params %>%
  mutate(topography = reorder(factor(topography), desc(rsq))) %>% 
  ggplot(aes(topography, rsq)) + 
  geom_boxplot() + 
  labs(title = "Model fit by topography type",
       y = "R-Squared",
       x = "Topography type") +
  theme_minimal()
```

It is quite clear that some categories for the variables explored have a poor fit. 
This makes sense in the case of forest (Wald) for instance. Evapotranspiration used in the SWB model is also modeled for a meadow, and this variable is expected to be much higher for the same conditions in a forest. A wrong ETP will in place result in a wrong estimate in the SWB model.

We should perform the same analysis for the rest of variables to identify other causes of error.


```{r}
# Add slope as a covariable.

library(terra)

dem <- rast(here("~/OpenDA/SwissShinyApp/hydromontania_data_prep/data/soil/bodendaten/Hoehenmodell_25m_CH/dhm25_grid_raster.asc"))

crs(dem) <- "epsg:21781"

slope <- terrain(dem, v="slope")

locations$slope <- slope %>% extract(vect(locations)) %>% 
  pull(slope)

locs_params <- locs_params %>% 
  left_join(locations %>% 
              st_drop_geometry() %>% 
              select(loc_id, slope))

locs_params %>%
  ggplot(aes(slope, CN)) + 
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Optimized Curve Runoff Number (CN) vs Location Slope",
       x = "Slope",
       y = "CN") +
  theme_minimal()

locs_params %>%
  ggplot(aes(WASSERDURC, DC)) + 
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Optimized Drainage Coefficient (DC) vs Water Permeability",
       x = "Water Permeability Class",
       y = "DC") +
  theme_minimal()

locs_params %>%
  ggplot(aes(SKELETT, DC)) + 
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Optimized Drainage Coefficient (DC) vs Soil Texture",
       x = "Coarse Soil Texture Class",
       y = "DC") +
  theme_minimal()

locs_params %>%
  ggplot(aes(SKELETT, DC)) + 
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Optimized Drainage Coefficient (DC) vs Soil Texture",
       x = "Coarse Soil Texture Class",
       y = "DC") +
  theme_minimal()

locs_params %>%
  ggplot(aes(SKELETT, MUF)) + 
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Moisture Utilization Factor (MUF) vs Soil Texture",
       x = "Coarse Soil Texture Class",
       y = "MUF") +
  theme_minimal()

locs_params %>%
  ggplot(aes(depth, WATfc)) + 
  geom_point() + 
  geom_smooth(se = FALSE, method = "lm") +
  labs(title = "Water available at Field Capacity (WATfc) vs Soil Depth",
       x = "Soil Depth",
       y = "WATfc") +
  theme_minimal()


```

Again, there are very few locations to reach valuable insights, and in adittion, the majority of them wew poorly fitted. But in with those considerations, in some of the scatterplots some interesting patterns or trends can be seen.

The chart on water at field capacity and depth should not be considered now since the same soil depth was used to correct the percentage volumetric soil moisture to absolute water available.

If we manage to gather data on more stations with volumetric data, or if we manage somehow to utilize tension soil moisture in the calibration, chances are we might come up to a decent model to take soil and terrain data as input to estimate SWB soil parameters input.

